// inventory_manager.js

// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ gameState, domElements, ITEM_DEFINITIONS, UIManager, game
// –¥–æ—Å—Ç—É–ø–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ.

// –ù–û–í–´–ô –û–ë–™–ï–ö–¢: –°–º–∞–π–ª–∏–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
const ITEM_TYPE_EMOJIS = {
    food: "üçé",
    water: "üíß",
    water_source: "üíß",
    medicine: "üíä",
    material: "üß±",
    tool: "üõ†Ô∏è",
    weapon: "‚öîÔ∏è",
    armor: "üõ°Ô∏è",
    quest_item: "üìú",
    ammo: "üí£",
    junk: "üî©", // –î–ª—è –≤—Å—è–∫–æ–≥–æ —Ö–ª–∞–º–∞
    key: "üîë",  // –î–ª—è –∫–ª—é—á–µ–π
    clothing: "üëï",
    book: "üìï",
    note: "üìù",
    default: "üì¶" // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–ª–∏ –æ–±—â–∏—Ö —Ç–∏–ø–æ–≤
};


const InventoryManager = {
    addItemToInventory: function(targetInventory, itemId, quantity = 1) {
        if (typeof ITEM_DEFINITIONS === 'undefined' || !ITEM_DEFINITIONS[itemId]) { // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è ITEM_DEFINITIONS –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º
            console.error(`–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç: ${itemId}`);
            if (typeof game !== 'undefined' && game.log) game.log(`–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç ${itemId}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π/—Å–æ–±—ã—Ç–∏–π.`, "event-negative");
            return false;
        }
        const itemDef = ITEM_DEFINITIONS[itemId];

        if (targetInventory === gameState.inventory) { 
            if ((gameState.player.carryWeight + (itemDef.weight * quantity) > gameState.player.maxCarryWeight)) {
                if (typeof game !== 'undefined' && game.log) game.log(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –≤ –ª–∏—á–Ω–æ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –¥–ª—è ${itemDef.name} (x${quantity}).`, "event-warning");
                return false;
            }
        } else if (targetInventory === gameState.baseInventory) { 
            const usage = GameStateGetters.getBaseInventoryUsage();
            const isNewItemForBase = !targetInventory.some(slot => slot.itemId === itemId && itemDef.stackable);
            if (isNewItemForBase && usage.current >= usage.max) {
                 if (typeof game !== 'undefined' && game.log) game.log(`–°–∫–ª–∞–¥ –±–∞–∑—ã –∑–∞–ø–æ–ª–Ω–µ–Ω! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞: ${itemDef.name}.`, "event-warning");
                return false;
            }
        }

        const existingItemIndex = targetInventory.findIndex(slot => slot.itemId === itemId && itemDef.stackable);
        if (existingItemIndex > -1) {
            targetInventory[existingItemIndex].quantity += quantity;
        } else {
            targetInventory.push({ itemId: itemId, quantity: quantity });
        }

        if (targetInventory === gameState.inventory) {
            gameState.player.carryWeight += itemDef.weight * quantity;
            gameState.player.carryWeight = parseFloat(gameState.player.carryWeight.toFixed(2));
            if (typeof UIManager !== 'undefined') UIManager.updateInventoryWeightDisplay();
            this.renderPlayerInventoryIfActive();
        } else if (targetInventory === gameState.baseInventory) {
            this.renderBaseInventoryIfActive();
             if (typeof UIManager !== 'undefined') UIManager.updateDisplay(); 
        }
        return true;
    },

    removeItemFromInventory: function(targetInventory, itemId, quantity = 1, specificIndex = -1) {
        if (typeof ITEM_DEFINITIONS === 'undefined') {
            console.error("ITEM_DEFINITIONS –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ removeItemFromInventory");
            return false;
        }
        const itemDef = ITEM_DEFINITIONS[itemId];
        if (!itemDef) {
            console.error(`–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç: ${itemId}`);
            return false;
        }

        let itemIndex;
        if (specificIndex > -1 && targetInventory[specificIndex] && targetInventory[specificIndex].itemId === itemId) {
            itemIndex = specificIndex;
        } else {
            itemIndex = targetInventory.findIndex(slot => slot.itemId === itemId);
        }

        if (itemIndex > -1) {
            const itemSlot = targetInventory[itemIndex];
            let removedQuantity = 0;
            if (itemSlot.quantity > quantity) {
                itemSlot.quantity -= quantity;
                removedQuantity = quantity;
            } else {
                removedQuantity = itemSlot.quantity;
                targetInventory.splice(itemIndex, 1);
            }
            if (targetInventory === gameState.inventory) {
                gameState.player.carryWeight -= itemDef.weight * removedQuantity;
                gameState.player.carryWeight = Math.max(0, parseFloat(gameState.player.carryWeight.toFixed(2)));
                if (typeof UIManager !== 'undefined') UIManager.updateInventoryWeightDisplay();
                this.renderPlayerInventoryIfActive();
            } else if (targetInventory === gameState.baseInventory) {
                this.renderBaseInventoryIfActive();
                if (typeof UIManager !== 'undefined') UIManager.updateDisplay(); 
            }
            return true;
        }
        return false;
    },

    countItemInInventory: function(targetInventory, itemId) {
        let count = 0;
        if (!targetInventory || !Array.isArray(targetInventory)) return 0;
        targetInventory.forEach(slot => {
            if (slot.itemId === itemId) {
                count += slot.quantity;
            }
        });
        return count;
    },

    openInventoryModal: function() {
        if (!domElements || !domElements.inventoryModal) return;
        domElements.inventoryModal.style.display = 'block';
        this.filterPlayerInventory('all'); 
    },

    closeInventoryModal: function() {
        if (!domElements || !domElements.inventoryModal) return;
        domElements.inventoryModal.style.display = 'none';
    },

    filterPlayerInventory: function(filterType) {
        if (domElements.inventoryFilters) {
            domElements.inventoryFilters.querySelectorAll('button').forEach(b => b.classList.remove('active'));
            const activeButton = domElements.inventoryFilters.querySelector(`button[data-filter="${filterType}"]`);
            if (activeButton) activeButton.classList.add('active');
        }
        this.renderPlayerInventory(filterType);
    },

    filterBaseInventory: function(filterType) {
        if (domElements.baseInventoryFilters) {
            domElements.baseInventoryFilters.querySelectorAll('button').forEach(b => b.classList.remove('active'));
            const activeButton = domElements.baseInventoryFilters.querySelector(`button[data-filter="${filterType}"]`);
            if (activeButton) activeButton.classList.add('active');
        }
        this.renderBaseInventory(filterType);
    },

    renderPlayerInventoryIfActive: function() {
        if (domElements.inventoryModal && domElements.inventoryModal.style.display === 'block') {
            const activeFilterButton = domElements.inventoryFilters?.querySelector('button.active');
            const activeFilter = activeFilterButton ? activeFilterButton.dataset.filter : 'all';
            this.renderPlayerInventory(activeFilter);
        }
    },

    renderBaseInventoryIfActive: function() {
        const storageTab = document.getElementById('storage-tab');
        if (storageTab && storageTab.style.display === 'block') {
            const activeFilterButton = domElements.baseInventoryFilters?.querySelector('button.active');
            const activeFilter = activeFilterButton ? activeFilterButton.dataset.filter : 'all';
            this.renderBaseInventory(activeFilter);
        }
    },

    renderPlayerInventory: function(filterType = 'all') {
        if (!domElements || !domElements.inventoryItemsList || typeof ITEM_DEFINITIONS === 'undefined') return;
        domElements.inventoryItemsList.innerHTML = '';
        const inventoryToDisplay = gameState.inventory;

        if (inventoryToDisplay.length === 0) {
            domElements.inventoryItemsList.innerHTML = '<p>–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.</p>';
            if (typeof UIManager !== 'undefined') UIManager.updateInventoryWeightDisplay();
            return;
        }

        let somethingRendered = false;
        inventoryToDisplay.forEach((itemSlot, index) => {
            const itemDef = ITEM_DEFINITIONS[itemSlot.itemId];
            if (!itemDef) {
                console.warn(`InventoryManager.renderPlayerInventory: Definition for item ${itemSlot.itemId} not found.`);
                return;
            }

            let passesFilter = (filterType === 'all');
            if (!passesFilter) {
                if (filterType === 'water_source' && (itemDef.type === 'water' || itemDef.type === 'water_source')) {
                    passesFilter = true;
                } else if (itemDef.type === filterType) {
                    passesFilter = true;
                }
            }
            if (!passesFilter) return;

            somethingRendered = true;
            const itemDiv = document.createElement('div');
            itemDiv.className = 'inventory-item';

            let itemActionsHTML = '';
            if (itemDef.type === 'food' || itemDef.type === 'water' || itemDef.type === 'water_source' || itemDef.type === 'medicine') {
                itemActionsHTML += `<button onclick="InventoryManager.consumeItem('${itemSlot.itemId}', ${index})">–ò—Å–ø.</button>`;
            }
            itemActionsHTML += `<button onclick="InventoryManager.transferItem('${itemSlot.itemId}', ${index}, 'player', 'base', 1)">–ù–∞ —Å–∫–ª–∞–¥ (1)</button>`;
            if (itemSlot.quantity > 1) {
                 itemActionsHTML += `<button onclick="InventoryManager.transferItem('${itemSlot.itemId}', ${index}, 'player', 'base', ${itemSlot.quantity})">–ù–∞ —Å–∫–ª–∞–¥ (–í—Å–µ)</button>`;
            }
            
            const emoji = ITEM_TYPE_EMOJIS[itemDef.type] || ITEM_TYPE_EMOJIS.default; // –ü–æ–ª—É—á–∞–µ–º —Å–º–∞–π–ª–∏–∫

            itemDiv.innerHTML = `
                <div class="item-info">
                    <h4><span class="item-emoji">${emoji}</span> ${itemDef.name} <span class="item-quantity">(x${itemSlot.quantity})</span></h4>
                    <p>${itemDef.description} (–í–µ—Å: ${(itemDef.weight * itemSlot.quantity).toFixed(1)} –∫–≥ / ${itemDef.weight.toFixed(1)} –∫–≥/—à—Ç)</p>
                </div>
                <div class="item-actions">
                    ${itemActionsHTML}
                </div>
            `;
            domElements.inventoryItemsList.appendChild(itemDiv);
        });

        if (!somethingRendered && filterType !== 'all') {
             domElements.inventoryItemsList.innerHTML = `<p>–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ç–∏–ø–∞ '${filterType}'.</p>`;
        }
        if (typeof UIManager !== 'undefined') UIManager.updateInventoryWeightDisplay();
    },

    renderBaseInventory: function(filterType = 'all') {
        if (!domElements || !domElements.baseInventoryList || typeof ITEM_DEFINITIONS === 'undefined') return;
        domElements.baseInventoryList.innerHTML = '';
        const inventoryToDisplay = gameState.baseInventory;

        if (inventoryToDisplay.length === 0) {
            domElements.baseInventoryList.innerHTML = '<p>–°–∫–ª–∞–¥ –±–∞–∑—ã –ø—É—Å—Ç.</p>';
            return;
        }

        let somethingRendered = false;
        inventoryToDisplay.forEach((itemSlot, index) => {
            const itemDef = ITEM_DEFINITIONS[itemSlot.itemId];
            if (!itemDef) {
                console.warn(`InventoryManager.renderBaseInventory: Definition for item ${itemSlot.itemId} not found.`);
                return;
            }

            let passesFilter = (filterType === 'all');
            if (!passesFilter) {
                if (filterType === 'water_source' && (itemDef.type === 'water' || itemDef.type === 'water_source')) {
                    passesFilter = true;
                } else if (itemDef.type === filterType) {
                    passesFilter = true;
                }
            }
            if (!passesFilter) return;

            somethingRendered = true;
            const itemDiv = document.createElement('div');
            itemDiv.className = 'inventory-item';

            let itemActionsHTML = '';
            itemActionsHTML += `<button onclick="InventoryManager.transferItem('${itemSlot.itemId}', ${index}, 'base', 'player', 1)">–í–∑—è—Ç—å (1)</button>`;
            if (itemSlot.quantity > 1) {
                 itemActionsHTML += `<button onclick="InventoryManager.transferItem('${itemSlot.itemId}', ${index}, 'base', 'player', ${itemSlot.quantity})">–í–∑—è—Ç—å (–í—Å–µ)</button>`;
            }

            const emoji = ITEM_TYPE_EMOJIS[itemDef.type] || ITEM_TYPE_EMOJIS.default; // –ü–æ–ª—É—á–∞–µ–º —Å–º–∞–π–ª–∏–∫

            itemDiv.innerHTML = `
                <div class="item-info">
                    <h4><span class="item-emoji">${emoji}</span> ${itemDef.name} <span class="item-quantity">(x${itemSlot.quantity})</span></h4>
                    <p>${itemDef.description}</p> 
                </div>
                <div class="item-actions">
                    ${itemActionsHTML}
                </div>
            `;
            domElements.baseInventoryList.appendChild(itemDiv);
        });
        if(!somethingRendered && filterType !== 'all') {
             domElements.baseInventoryList.innerHTML = `<p>–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ç–∏–ø–∞ '${filterType}'.</p>`;
        }
    },

    transferItem: function(itemId, itemIndexInSource, sourceInventoryType, destinationInventoryType, quantity) {
        if (typeof ITEM_DEFINITIONS === 'undefined') {
            console.error("ITEM_DEFINITIONS –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ transferItem");
            return;
        }
        const itemDef = ITEM_DEFINITIONS[itemId];
        if (!itemDef) return;

        const sourceInventory = sourceInventoryType === 'player' ? gameState.inventory : gameState.baseInventory;
        const destinationInventory = destinationInventoryType === 'player' ? gameState.inventory : gameState.baseInventory;

        if (!Array.isArray(sourceInventory) || !Array.isArray(destinationInventory)) {
            console.error("–û—à–∏–±–∫–∞: –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º.");
            return;
        }

        const sourceSlot = sourceInventory[itemIndexInSource];
        if (!sourceSlot || sourceSlot.itemId !== itemId) {
            console.error("–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–ª–æ—Ç–µ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.", itemId, itemIndexInSource, sourceInventory);
            return;
        }

        const actualQuantity = Math.min(quantity, sourceSlot.quantity);

        if (destinationInventory === gameState.inventory) { 
            if (gameState.player.carryWeight + (itemDef.weight * actualQuantity) > gameState.player.maxCarryWeight) {
                if (typeof game !== 'undefined' && game.log) game.log(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –≤ –ª–∏—á–Ω–æ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –¥–ª—è ${itemDef.name} (x${actualQuantity}).`, "event-warning");
                return;
            }
        } else if (destinationInventory === gameState.baseInventory) {
            const usage = GameStateGetters.getBaseInventoryUsage();
            const isNewItemForDestBase = !destinationInventory.some(slot => slot.itemId === itemId && itemDef.stackable);
            if (isNewItemForDestBase && usage.current >= usage.max) {
                if (typeof game !== 'undefined' && game.log) game.log(`–°–∫–ª–∞–¥ –±–∞–∑—ã –∑–∞–ø–æ–ª–Ω–µ–Ω! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞: ${itemDef.name}.`, "event-warning");
                return;
            }
        }

        let itemRemovedSuccessfully = this.removeItemFromInventory(sourceInventory, itemId, actualQuantity, itemIndexInSource);
        if (itemRemovedSuccessfully) {
            let itemAddedSuccessfully = this.addItemToInventory(destinationInventory, itemId, actualQuantity);
            if (!itemAddedSuccessfully) {
                this.addItemToInventory(sourceInventory, itemId, actualQuantity); // –û—Ç–∫–∞—Ç
                if (typeof game !== 'undefined' && game.log) game.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ${itemDef.name} –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.`, "event-negative");
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–π –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞
                if (sourceInventory === gameState.inventory) this.renderPlayerInventoryIfActive();
                else if (sourceInventory === gameState.baseInventory) this.renderBaseInventoryIfActive();
                return;
            }
            if (typeof game !== 'undefined' && game.log) game.log(`–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: ${itemDef.name} (x${actualQuantity}) ${sourceInventoryType === 'player' ? '–Ω–∞ —Å–∫–ª–∞–¥' : '–≤ –ª–∏—á–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'}.`, "event-neutral");
        } else {
            if (typeof game !== 'undefined' && game.log) game.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${itemDef.name} –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.`, "event-negative");
            return;
        }
    },

    consumeItem: function(itemId, inventoryItemIndex) { 
        if (typeof ITEM_DEFINITIONS === 'undefined') return;
        const targetInventory = gameState.inventory; 
        const itemDef = ITEM_DEFINITIONS[itemId];

        if (!itemDef || !itemDef.effect) {
            if (typeof game !== 'undefined' && game.log) game.log(`–ü—Ä–µ–¥–º–µ—Ç '${itemDef ? itemDef.name : itemId}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É–ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã–º.`, "event-neutral");
            return;
        }

        let consumed = false;
        if (itemDef.type === "food" && typeof itemDef.effect.hunger === 'number') {
            gameState.player.hunger = Math.min(gameState.player.maxHunger, gameState.player.hunger + itemDef.effect.hunger);
            if (typeof game !== 'undefined' && game.log) game.log(`–í—ã —Å—ä–µ–ª–∏: ${itemDef.name}. –°—ã—Ç–æ—Å—Ç—å +${itemDef.effect.hunger}.`, "event-positive");
            consumed = true;
        } else if ((itemDef.type === "water" || itemDef.type === "water_source") && typeof itemDef.effect.thirst === 'number') {
            if (itemDef.effect.sickness_chance && Math.random() < itemDef.effect.sickness_chance) {
                if (typeof game !== 'undefined' && game.log) game.log(`–í—ã –≤—ã–ø–∏–ª–∏ ${itemDef.name}, –Ω–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ —Å–µ–±—è —Ö—É–∂–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ.`, "event-negative");
                gameState.player.condition = "–ü–æ–¥—Ç–∞—à–Ω–∏–≤–∞–µ—Ç"; 
            } else {
                gameState.player.thirst = Math.min(gameState.player.maxThirst, gameState.player.thirst + itemDef.effect.thirst);
                if (typeof game !== 'undefined' && game.log) game.log(`–í—ã –≤—ã–ø–∏–ª–∏: ${itemDef.name}. –ñ–∞–∂–¥–∞ —É—Ç–æ–ª–µ–Ω–∞ –Ω–∞ +${itemDef.effect.thirst}.`, "event-positive");
            }
            consumed = true;
        } else if (itemDef.type === "medicine" && typeof itemDef.effect.healing === 'number') {
            gameState.player.health = Math.min(gameState.player.maxHealth, gameState.player.health + itemDef.effect.healing);
            if (typeof game !== 'undefined' && game.log) game.log(`–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ ${itemDef.name}. –ó–¥–æ—Ä–æ–≤—å–µ +${itemDef.effect.healing}.`, "event-positive");
            consumed = true;
        }

        if (consumed) {
            this.removeItemFromInventory(targetInventory, itemId, 1, inventoryItemIndex);
        }
        if (typeof UIManager !== 'undefined') {
            UIManager.updatePlayerStatus(); 
        }
    },

    consumeResourceFromBase: function(resourceType, amountNeeded) {
        let amountFulfilled = 0;
        if (!gameState.baseInventory || typeof ITEM_DEFINITIONS === 'undefined') return 0;
        const inventory = gameState.baseInventory;
        
        inventory.sort((aSlot, bSlot) => {
            const aDef = ITEM_DEFINITIONS[aSlot.itemId];
            const bDef = ITEM_DEFINITIONS[bSlot.itemId];
            let aValue = 0; let bValue = 0;

            if (!aDef || !bDef) return 0; // –ï—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ—Ç, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ–º –≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ

            if (resourceType === 'food') {
                aValue = (aDef.effect?.hunger || 0) * (aDef.effect?.sickness_chance || aDef.effect?.radiation ? 0.5 : 1);
                bValue = (bDef.effect?.hunger || 0) * (bDef.effect?.sickness_chance || bDef.effect?.radiation ? 0.5 : 1);
            } else if (resourceType === 'water') {
                aValue = (aDef.effect?.thirst || 0) * (aDef.effect?.sickness_chance ? 0.5 : 1);
                bValue = (bDef.effect?.thirst || 0) * (bDef.effect?.sickness_chance ? 0.5 : 1);
            }
            return aValue - bValue; 
        });

        for (let i = inventory.length - 1; i >= 0 && amountFulfilled < amountNeeded; i--) { 
            const slot = inventory[i]; 
            if (!slot) continue; 

            const itemDef = ITEM_DEFINITIONS[slot.itemId];
            if (!itemDef) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞

            let itemValue = 0;
            let isCorrectType = false;

            if (resourceType === 'food' && itemDef.type === 'food' && itemDef.effect?.hunger) {
                itemValue = itemDef.effect.hunger;
                isCorrectType = true;
                if (itemDef.effect?.radiation && Math.random() < 0.05 * gameState.survivors) { 
                    if (typeof game !== 'undefined' && game.log) game.log(`–ö—Ç–æ-—Ç–æ –ø–æ–ª—É—á–∏–ª –¥–æ–∑—É —Ä–∞–¥–∏–∞—Ü–∏–∏ –æ—Ç ${itemDef.name}.`, "event-warning");
                }
                 if (itemDef.effect?.sickness_chance && Math.random() < itemDef.effect.sickness_chance * 0.05 * gameState.survivors) { 
                    if (typeof game !== 'undefined' && game.log) game.log(`–ö—Ç–æ-—Ç–æ –∏–∑ –≤—ã–∂–∏–≤—à–∏—Ö –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª —Å–µ–±—è –ø–ª–æ—Ö–æ –æ—Ç ${itemDef.name} —Å–æ —Å–∫–ª–∞–¥–∞.`, "event-warning");
                }
            } else if (resourceType === 'water' && (itemDef.type === 'water' || itemDef.type === 'water_source') && itemDef.effect?.thirst) {
                itemValue = itemDef.effect.thirst;
                isCorrectType = true;
                 if (itemDef.effect?.sickness_chance && Math.random() < itemDef.effect.sickness_chance * 0.05 * gameState.survivors) { 
                    if (typeof game !== 'undefined' && game.log) game.log(`–ö—Ç–æ-—Ç–æ –∏–∑ –≤—ã–∂–∏–≤—à–∏—Ö –∑–∞–±–æ–ª–µ–ª, –≤—ã–ø–∏–≤ ${itemDef.name} —Å–æ —Å–∫–ª–∞–¥–∞.`, "event-warning");
                }
            }

            if (isCorrectType && itemValue > 0) {
                const neededFromThisSlot = Math.ceil((amountNeeded - amountFulfilled) / itemValue);
                const canConsumeFromSlot = Math.min(slot.quantity, neededFromThisSlot);
                
                amountFulfilled += canConsumeFromSlot * itemValue;
                this.removeItemFromInventory(gameState.baseInventory, slot.itemId, canConsumeFromSlot, i); 
                // removeItemFromInventory —É–∂–µ –≤—ã–∑–æ–≤–µ—Ç renderBaseInventoryIfActive –∏ UIManager.updateDisplay
            }
        }
        // if (typeof UIManager !== 'undefined') UIManager.updateDisplay(); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏ –≤ UI
        return Math.min(amountFulfilled, amountNeeded); 
    },

    sortInventory: function(targetInventory, sortBy = 'name') {
        if (!targetInventory || !Array.isArray(targetInventory) || typeof ITEM_DEFINITIONS === 'undefined') return;
        
        const logFunc = (typeof game !== 'undefined' && game.log) ? game.log : console.log;
        logFunc(`–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ: ${sortBy}`, "event-neutral");

        targetInventory.sort((a, b) => {
            const itemDefA = ITEM_DEFINITIONS[a.itemId];
            const itemDefB = ITEM_DEFINITIONS[b.itemId];

            if (!itemDefA && !itemDefB) return 0;
            if (!itemDefA) return 1; // –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∫–æ–Ω–µ—Ü
            if (!itemDefB) return -1; // –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∫–æ–Ω–µ—Ü

            switch (sortBy) {
                case 'type':
                    const typeA = itemDefA.type || 'zzzz'; // –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –≤ –∫–æ–Ω–µ—Ü
                    const typeB = itemDefB.type || 'zzzz';
                    const typeComparison = typeA.localeCompare(typeB);
                    if (typeComparison !== 0) return typeComparison;
                    return (itemDefA.name || '').localeCompare(itemDefB.name || ''); 
                case 'quantity':
                    const quantityComparison = b.quantity - a.quantity; 
                    if (quantityComparison !== 0) return quantityComparison;
                    return (itemDefA.name || '').localeCompare(itemDefB.name || '');
                case 'weight': 
                    const weightA = (itemDefA.weight || 0) * a.quantity;
                    const weightB = (itemDefB.weight || 0) * b.quantity;
                    const weightComparison = weightA - weightB; 
                    if (weightComparison !== 0) return weightComparison;
                    return (itemDefA.name || '').localeCompare(itemDefB.name || '');
                case 'name':
                default:
                    return (itemDefA.name || '').localeCompare(itemDefB.name || '');
            }
        });

        if (targetInventory === gameState.inventory) {
            this.renderPlayerInventoryIfActive();
        } else if (targetInventory === gameState.baseInventory) {
            this.renderBaseInventoryIfActive();
        }
    }
};
